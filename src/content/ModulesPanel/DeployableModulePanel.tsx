import { Button } from "@mui/material";
import ModuleRow from "../../ui/ModuleRow";
import { ModuleName, ModuleState } from "../../utils/getPowerArmorData";
import { DataContext, PowerArmorStates } from "../DataProvider";
import { Fragment, useContext } from "react";
import CheckBoxLabel from "../../ui/CheckBoxLabel";
import { changeMessage, changeName, clickSubmitButton, sendCcfoliaMessage } from "../../utils/sendCcfoliaMessage";

const deployableModules: string[] = [
    "„Éê„É™„Ç¢„Éõ„Éº„É≥",
    "„Ç™„Éó„Ç∑„Éß„É≥"
]

export default function DeployableModulePanel({module}: {module: ModuleState}){
    const {
        data,
        getEnergyCost,
        setData,
        armorIndex
    } = useContext(DataContext);

    function getEnergyCostsText(contract?: boolean): string{
        const baseEnergyCost: number = module.energyCost;
        const energyCost: number = getEnergyCost(armorIndex, baseEnergyCost); // „Ç®„Éç„É´„ÇÆ„ÉºÁ≥ªÂäπÁéáÂåñ„ÇíÈÅ©Áî®„Åó„ÅüÂæå„ÅÆ„Ç≥„Çπ„Éà
        let energyEfficiencyText: string = "";
        if (contract) {
            energyEfficiencyText = (baseEnergyCost === energyCost) ? "" : `(${energyCost})`;
        }else{
            energyEfficiencyText = (baseEnergyCost === energyCost) ? "" : `(ENÂäπÁéá: ${baseEnergyCost - energyCost})`;
        }
        return `Ê∂àË≤ªEN: ${baseEnergyCost}${energyEfficiencyText}, Á∂ôÁ∂öÊ∂àË≤ªEN: +${module.sustainEnergyCost}`;
    }

    function getModuleText(): string{
        const levelText: string = module.level > 0 ? `+${module.level}` : "";
        switch(module.name){
            case "„Éê„É™„Ç¢„Éõ„Éº„É≥":
                return(
`„Äå„Éê„É™„Ç¢„Éõ„Éº„É≥üîÄ${levelText}„Äç
ÂäπÊûú: ÂäπÊûúÁØÑÂõ≤ÂÜÖ„ÅÆÂë≥Êñπ„ÅÆË¢´„ÉÄ„É°„Éº„Ç∏0.75ÂÄç(„Éê„É™„Ç¢„Éõ„Éº„É≥„ÇíÈô§„Åè)
ÂäπÊûúÁØÑÂõ≤: „Éê„É™„Ç¢„Éõ„Éº„É≥„Çí‰∏≠ÂøÉ„Å´3√ó3„Éû„Çπ
${getEnergyCostsText()}`
                );
            case "„Ç™„Éó„Ç∑„Éß„É≥":
                return(
`„Äå„Ç™„Éó„Ç∑„Éß„É≥üîÄ${levelText}„Äç
ÂäπÊûúÁØÑÂõ≤(ÂÖ®ÂäπÊûú): 3„Éû„Çπ
ÂäπÊûú: „Ç™„Éó„Ç∑„Éß„É≥„ÅÆ„Çø„Éº„É≥ÈñãÂßãÊôÇ„ÄÅ‰ª•‰∏ã„ÅÆÂäπÊûú„Åã„Çâ1„Å§ÈÅ∏Êäû„Åó„Å¶Áô∫Âãï„Åß„Åç„Çã„ÄÇ
„ÉªÂõÆ: 1‰Ωì„Å´ÊåëÁô∫Áä∂ÊÖã(2„Çø„Éº„É≥, ÂØæË±°: „Ç™„Éó„Ç∑„Éß„É≥)„Çí‰ªò‰∏é
„ÉªÂõûÂæ©: Âë≥Êñπ1‰Ωì„ÅÆHP„Çí2d6ÂõûÂæ©
„Éª„Çµ„Éù„Éº„Éà: 1‰Ωì„ÅÆ‰∏é„ÉÄ„É°„Éº„Ç∏„Å´1d6+6„ÇíËøΩÂä†(„Ç™„Éó„Ç∑„Éß„É≥„ÅÆÊ¨°„Çø„Éº„É≥ÈñãÂßãÊôÇ„Åæ„Åß)
${getEnergyCostsText()}`
                );
            default:
                return "";
        }
    }

    function handleUseDeployableModule(){
        const energyCost: number = getEnergyCost(armorIndex, module.energyCost);
        const moduleText: string = getModuleText();
        const isSent: boolean = sendCcfoliaMessage([moduleText], data.characterName);
        if(isSent){
            changeName(data.powerArmors[armorIndex].armorName);
            changeMessage(`:EN-${energyCost}`);
            clickSubmitButton();
            toggleEnableDeployableModule(true); // Ë®≠ÁΩÆÁ≥ªÊê≠ËºâËÉΩÂäõ„ÅÆË®≠ÁΩÆ„Çístate„ÅßÁÆ°ÁêÜ„Åô„Çã
        }
    }

    function toggleEnableDeployableModule(value? : boolean){
        const newValue = typeof value === "boolean" ? value : !module.isEnabled;
        setData((prev) => {
            return {
                ...prev,
                powerArmors: prev.powerArmors.map((armor, index): PowerArmorStates => {
                    if (index !== armorIndex) return armor as PowerArmorStates;
                    return {
                        ...armor,
                        modules: armor.modules.map((m) => {
                            if (m.name !== module.name) return m;
                            return {
                                ...m,
                                isEnabled: newValue,
                            };
                        }),
                    } as PowerArmorStates;
                }),
            };
        });
    }

    return(
        <>
            {deployableModules.includes(module.name) && (
                <ModuleRow
                    input={
                        <span>
                            {getEnergyCostsText(true)
                                .split(", ")
                                .map((text, i) => (
                                    <Fragment key={i}>
                                        {text}
                                        <br />
                                    </Fragment>
                                ))
                            }
                        </span>
                    }
                    button={
                        <Button
                            className="draggable-disable"
                            onClick={handleUseDeployableModule}
                        >
                            {module.name}Ë®≠ÁΩÆ
                        </Button>
                    }
                    checkbox={
                        <CheckBoxLabel
                            label="Á∂ôÁ∂ö"
                            isChecked={module.isEnabled}
                            setIsChecked={() => toggleEnableDeployableModule()}
                        />
                    }
                />
            )}
        </>
    );
}

// TODO: „Ç™„Éó„Ç∑„Éß„É≥„ÅÆËÉΩÂäõÈÅ∏Êäû
// TODO: Á∂ôÁ∂öENÊ∂àË≤ªÂá¶ÁêÜ
